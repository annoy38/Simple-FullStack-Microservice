{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-453ee78d\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"card\"\n};\nconst _hoisted_2 = {\n  class: \"card-border\"\n};\nconst _hoisted_3 = {\n  class: \"container\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", {\n  style: {\n    \"margin\": \"20px\"\n  }\n}, \"Generate Solutions using Open AI\", -1 /* HOISTED */));\nconst _hoisted_5 = {\n  class: \"Text-Area\"\n};\nconst _hoisted_6 = {\n  id: \"text_area\",\n  ref: \"text_area\",\n  cols: \"30\",\n  rows: \"10\"\n};\nconst _hoisted_7 = {\n  class: \"Query-Area\"\n};\nconst _hoisted_8 = {\n  type: \"text\",\n  ref: \"query_area\",\n  id: \"query_area\",\n  placeholder: \"Enter your Query\"\n};\nconst _hoisted_9 = {\n  class: \"Btns\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"textarea\", _hoisted_6, null, 512 /* NEED_PATCH */)]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"input\", _hoisted_8, null, 512 /* NEED_PATCH */)]), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"button\", {\n    id: \"btn1\",\n    ref: \"myButton\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.generateText && $options.generateText(...args))\n  }, \"Generate Text\", 512 /* NEED_PATCH */)])])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","style","id","ref","cols","rows","type","placeholder","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","onClick","_cache","args","$options","generateText"],"sources":["/home/annoy/vueJs project/blood-and-eye-org-system/src/views/chatBotAI.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"card\">\n      <div class=\"card-border\">\n        <div class=\"container\">\n          <h1 style=\"margin: 20px;\">Generate Solutions using Open AI</h1>\n          <div class=\"Text-Area\">\n            <textarea id=\"text_area\" ref=\"text_area\" cols=\"30\" rows=\"10\"></textarea>\n          </div>\n          <div class=\"Query-Area\">\n            <input type=\"text\" ref=\"query_area\" id=\"query_area\" placeholder=\"Enter your Query\">\n          </div>\n          <div class=\"Btns\">\n            <button id=\"btn1\" ref=\"myButton\" @click=\"generateText\">Generate Text</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'chatBotAI',\n  data() {\n    return {\n      API_Key: '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',\n      API_URL: 'https://api.openai.com/v1/chat/completions',\n      requestCount: 0,\n      lastRequestTime: 0,\n      MAX_REQUESTS_PER_MINUTE: 60, // Define the maximum number of requests per minute\n    };\n  },\n  methods: {\n    generateText() {\n      if (this.$refs.query_area.value === '') {\n        alert('Invalid Input');\n        this.$refs.query_area.value = '';\n        return false;\n      } else {\n        this.$refs.myButton.disabled = true;\n        this.$refs.myButton.style.cursor = 'wait';\n        this.$refs.myButton.innerText = 'Generating...';\n        const headers = {\n          Authorization: `Bearer ${this.API_Key}`,\n          'Content-Type': 'application/json',\n        };\n        const data = {\n          model: 'gpt-3.5-turbo',\n          messages: [{ role: 'user', content: this.$refs.query_area.value }],\n        };\n\n        this.makeRequest(data, headers);\n      }\n    },\n\n    makeRequest(data, headers) {\n      const currentTime = new Date().getTime();\n      if (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE && currentTime - this.lastRequestTime < 60000) {\n        // Exceeded rate limit, display an error or take appropriate action\n        console.error('Exceeded rate limit');\n        this.$refs.myButton.disabled = false;\n        this.$refs.myButton.style.cursor = 'pointer';\n        return;\n      }\n\n      axios\n        .post(this.API_URL, data, { headers })\n        .then(response => {\n          console.log(response.data);\n          this.printLikeChatGPT(response.data.choices[0].message.content);\n          this.$refs.myButton.disabled = true;\n          this.$refs.myButton.innerText = 'Generate Text';\n          this.$refs.query_area.value = '';\n\n          // Update rate limiting variables\n          this.requestCount++;\n          this.lastRequestTime = currentTime;\n        })\n        .catch(error => {\n          console.error(error);\n          this.$refs.myButton.disabled = false;\n          this.$refs.myButton.style.cursor = 'pointer';\n        });\n    },\n\n    printLikeChatGPT(data) {\n      this.$refs.myButton.disabled = false;\n      this.$refs.myButton.style.cursor = 'pointer';\n      const substring = data;\n      let i = 0;\n      const setInter = setInterval(() => {\n        this.$refs.text_area.value += substring.slice(i, i + 5);\n        i += 5;\n        if (this.$refs.text_area.value == data) {\n          clearInterval(setInter);\n        }\n      }, 200);\n    },\n  },\n};\n\n</script>\n\n<style scoped>\n.card {\n  display: flex;\n   /* background-color: #504fb5;  */\n  height: 100%;\n  justify-content: center;\n}\n\n.card-border {\n  border: outset;\n  color: black;\n  background-color: rgb(16, 185, 59);\n   box-shadow: rgba(132, 234, 229, 0.2) 0 80px 15px 15px;\n  /* background-image: linear-gradient(144deg,#AF40FF, #5B42F3 50%,#00DDEB);  */\n  border-radius: 20px;\n  \n}\n\n.container {\n  width: auto;\n  height: 100%;\n}\n.Text-Area {\n  display: flex;\n  height: 28rem;\n  justify-content: center;\n}\n\n#text_area {\n  resize: none;\n  height: 70%;\n  color: rgba(69, 115, 176, 0.855);\n  border-radius: 10px;\n  width: 90%;\n}\n\n.Query-Area {\n  display: flex;\n  justify-content: center;\n}\n\n#query_area {\n  display: flex;\n  color: rgb(44, 98, 89);\n  position: relative;\n  margin: 5px;\n  bottom: 130px;\n  width: 85%;\n  font-weight: bolder;\n  height: 30px;\n  padding: 10px;\n  border-radius: 10px;\n}\n\n.Btns {\n  display: flex;\n  justify-content: center;\n  position: relative;\n  bottom: 125px;\n  margin: 20px;\n  width: 100%;\n}\n\n#btn1 {\n  display: flex;\n  width: 80%;\n  background-color: black;\n  color: white;\n  height: 50px;\n  font-weight: bold;\n  border-radius: 12px;\n  justify-content: center;\n  align-items: center;\n  margin-right: 30px;\n}\n#btn1:hover {\n  display: flex;\n  width: 80%;\n  cursor:pointer;\n  background-color: white;\n  transition: 1s;\n  color: black;\n  border-radius: 12px;\n  justify-content: center;\n  align-items: center;\n  margin-right: 30px;\n}\n</style>\n"],"mappings":";;;EAESA,KAAK,EAAC;AAAM;;EACVA,KAAK,EAAC;AAAa;;EACjBA,KAAK,EAAC;AAAW;gEACpBC,mBAAA,CAA+D;EAA3DC,KAAqB,EAArB;IAAA;EAAA;AAAqB,GAAC,kCAAgC;;EACrDF,KAAK,EAAC;AAAW;;EACVG,EAAE,EAAC,WAAW;EAACC,GAAG,EAAC,WAAW;EAACC,IAAI,EAAC,IAAI;EAACC,IAAI,EAAC;;;EAErDN,KAAK,EAAC;AAAY;;EACdO,IAAI,EAAC,MAAM;EAACH,GAAG,EAAC,YAAY;EAACD,EAAE,EAAC,YAAY;EAACK,WAAW,EAAC;;;EAE7DR,KAAK,EAAC;AAAM;;uBAXzBS,mBAAA,CAiBM,cAhBJR,mBAAA,CAeM,OAfNS,UAeM,GAdJT,mBAAA,CAaM,OAbNU,UAaM,GAZJV,mBAAA,CAWM,OAXNW,UAWM,GAVJC,UAA+D,EAC/DZ,mBAAA,CAEM,OAFNa,UAEM,GADJb,mBAAA,CAAwE,YAAxEc,UAAwE,8B,GAE1Ed,mBAAA,CAEM,OAFNe,UAEM,GADJf,mBAAA,CAAmF,SAAnFgB,UAAmF,8B,GAErFhB,mBAAA,CAEM,OAFNiB,UAEM,GADJjB,mBAAA,CAA6E;IAArEE,EAAE,EAAC,MAAM;IAACC,GAAG,EAAC,UAAU;IAAEe,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;KAAE,eAAa,wB"},"metadata":{},"sourceType":"module","externalDependencies":[]}